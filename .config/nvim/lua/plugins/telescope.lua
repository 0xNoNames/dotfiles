return {}
-- return {
--   "nvim-telescope/telescope.nvim",
--   config = function()
--     local harpoon = require("harpoon")
--     harpoon:setup({})
--
--     -- basic telescope configuration
--     local conf = require("telescope.config").values
--     local function toggle_telescope(harpoon_files)
--       local file_paths = {}
--       for _, item in ipairs(harpoon_files.items) do
--         table.insert(file_paths, item.value)
--       end
--
--       require("telescope.pickers")
--         .new({}, {
--           prompt_title = "Harpoon",
--           finder = require("telescope.finders").new_table({
--             results = file_paths,
--           }),
--           previewer = conf.file_previewer({}),
--           sorter = conf.generic_sorter({}),
--         })
--         :find()
--     end
--
--     vim.keymap.set("n", "<C-e>", function()
--       toggle_telescope(harpoon:list())
--     end, { desc = "Open harpoon window" })
--     require("telescope").setup({
--       extensions = {
--         ["ui-select"] = {
--           require("telescope.themes").get_dropdown(),
--         },
--       },
--     })
--
--     -- Enable Telescope extensions if they are installed
--     pcall(require("telescope").load_extension, "fzf")
--     pcall(require("telescope").load_extension, "ui-select")
--     -- Telescope noice
--     pcall(require("telescope").load_extension, "noice")
--
--     -- See `:help telescope.builtin`
--     local builtin = require("telescope.builtin")
--     vim.keymap.set("n", "<leader>sh", builtin.help_tags, { desc = "[S]earch [H]elp" })
--     vim.keymap.set("n", "<leader>sk", builtin.keymaps, { desc = "[S]earch [K]eymaps" })
--     vim.keymap.set("n", "<leader>sf", builtin.find_files, { desc = "[S]earch [F]iles" })
--     vim.keymap.set("n", "<leader>ss", builtin.git_files, { desc = "[S]earch git files" })
--     -- vim.keymap.set('n', '<leader>ss', builtin.builtin, { desc = '[S]earch [S]elect Telescope' })
--     vim.keymap.set("n", "<leader>sw", builtin.grep_string, { desc = "[S]earch current [W]ord" })
--     vim.keymap.set("n", "<leader>sg", builtin.live_grep, { desc = "[S]earch by [G]rep" })
--     vim.keymap.set("n", "<leader>sd", builtin.diagnostics, { desc = "[S]earch [D]iagnostics" })
--     vim.keymap.set("n", "<leader>sr", builtin.resume, { desc = "[S]earch [R]esume" })
--     vim.keymap.set("n", "<leader>s.", builtin.oldfiles, { desc = '[S]earch Recent Files ("." for repeat)' })
--     vim.keymap.set("n", "<leader><leader>", builtin.buffers, { desc = "[ ] Find existing buffers" })
--
--     vim.keymap.set("n", "<leader>/", function()
--       builtin.current_buffer_fuzzy_find(require("telescope.themes").get_dropdown({
--         winblend = 10,
--         previewer = false,
--       }))
--     end, { desc = "[/] Fuzzily search in current buffer" })
--     vim.keymap.set("n", "<leader>s/", function()
--       builtin.live_grep({
--         grep_open_files = true,
--         prompt_title = "Live Grep in Open Files",
--       })
--     end, { desc = "[S]earch [/] in Open Files" })
--     vim.keymap.set("n", "<leader>sn", function()
--       builtin.find_files({ cwd = vim.fn.stdpath("config") })
--     end, { desc = "[S]earch [N]eovim files" })
--
--     vim.api.nvim_set_hl(0, "TreesitterContext", { bg = "NONE", ctermbg = "NONE", italic = true, bold = true }) --undercurl = true })
--     vim.api.nvim_set_hl(0, "TreesitterContextLineNumber", { bg = "NONE", ctermbg = "NONE" })
--     vim.api.nvim_set_hl(0, "TreesitterContextSeparator", { bg = "NONE", ctermbg = "NONE" })
--     vim.api.nvim_set_hl(0, "TreesitterContextBottom", { bg = "NONE", ctermbg = "NONE" })
--     vim.api.nvim_set_hl(0, "TreesitterContextLineNumberBottom", { bg = "NONE", ctermbg = "NONE" })
--   end,
-- }
